// <auto-generated />
using System;
using CompanyAPI.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyAPI.Database.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20250507121759_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyAPI.Database.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dezvoltare software și infrastructură IT",
                            Location = "Etaj 3",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Resurse umane și recrutare",
                            Location = "Etaj 1",
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("CompanyAPI.Database.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Email = "andrei.popescu@company.com",
                            FirstName = "Andrei",
                            HireDate = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Popescu",
                            Position = "Developer Senior",
                            Salary = 6500m
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Email = "maria.ionescu@company.com",
                            FirstName = "Maria",
                            HireDate = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ionescu",
                            Position = "Developer",
                            Salary = 5800m
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            Email = "elena.dumitrescu@company.com",
                            FirstName = "Elena",
                            HireDate = new DateTime(2019, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Dumitrescu",
                            Position = "HR Manager",
                            Salary = 6200m
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 2,
                            Email = "mihai.stanescu@company.com",
                            FirstName = "Mihai",
                            HireDate = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Stanescu",
                            Position = "HR Specialist",
                            Salary = 4500m
                        });
                });

            modelBuilder.Entity("CompanyAPI.Database.Entities.Employee", b =>
                {
                    b.HasOne("CompanyAPI.Database.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CompanyAPI.Database.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
